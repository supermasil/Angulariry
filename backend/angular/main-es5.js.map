{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/404/404.component.ts","webpack:///src/app/404/404.component.html","webpack:///src/app/angular-material.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth-interceptor.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/auth/auth.service.ts","webpack:///src/app/error-interceptor.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/front-page/front-page.component.ts","webpack:///src/app/front-page/front-page.component.html","webpack:///src/app/front-page/front-page.module.ts","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/posts/post-create-edit/mime-type.validator.ts","webpack:///src/app/posts/post-create-edit/post-create.component.ts","webpack:///src/app/posts/post-create-edit/post-create.component.html","webpack:///src/app/posts/post-list/post-list.component.ts","webpack:///src/app/posts/post-list/post-list.component.html","webpack:///src/app/posts/post.module.ts","webpack:///src/app/posts/post.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","Component404","templateUrl","styleUrls","AngularMaterialModule","routes","path","component","canActivate","loadChildren","AuthModule","AppRoutingModule","forRoot","imports","providers","AppComponent","authSerice","autoAuthUser","selector","AppModule","provide","useClass","multi","declarations","bootstrap","entryComponents","AuthInterceptor","authService","next","authToken","getToken","authRequest","clone","headers","set","handle","AuthGuard","router","route","state","isAuth","getIsAuth","navigate","BACKEND_URL","apiURL","AuthService","http","isAuthenticated","authStatusListener","token","asObservable","userId","email","password","authData","post","subscribe","response","console","log","message","err","error","expiresInDuration","expiresIn","setAuthTimer","expiration","Date","getTime","saveAuthData","clearTimeout","tokenTimer","clearAuthData","authInformation","getAuthData","now","duration","setTimeout","logout","expirationDate","localStorage","setItem","toISOString","removeItem","getItem","providedIn","ErrorInterceptor","dialog","pipe","errorMessage","open","data","ErrorComponent","FrontPageComponent","FrontPageModule","HeaderComponent","userIsAuthenticated","authListenerSub","getAuthStatusListener","unsubscribe","mimeType","control","value","file","fileReader","FileReader","frObs","create","observer","addEventListener","arr","Uint8Array","result","subarray","header","isValid","i","length","toString","invalidMimeType","complete","readAsArrayBuffer","PostCreateComponent","postsService","mode","isLoading","authStatusSub","authStatus","form","title","validators","required","minLength","content","image","asyncValidators","paramMap","has","postId","get","getPost","postData","_id","imagePath","creator","setValue","invalid","addPost","updatePost","reset","event","target","files","patchValue","updateValueAndValidity","reader","onload","imagePreview","readAsDataURL","PostListComponent","posts","totalPosts","postsPerPage","currentPage","pageSizeOptions","getPosts","postsSub","getPostUpdateListener","maxPosts","getUserId","deletePost","pageData","pageIndex","pageSize","onChangedPage","PostModule","PostsService","httpClient","postsUpdated","queryParams","map","transformedPosts","FormData","append","responseData","push","put","updatedPosts","oldPostIndex","findIndex","p","updatedPost","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  templateUrl: '404.component.html',\n  styleUrls: ['404.component.css']\n})\nexport class Component404 {\n}\n","<div class=\"page_404\">\n  <div class=\"four_zero_four_bg\"></div>\n  <h3>Look like you're lost</h3>\n\t<a href=\"/\" class=\"link_404\">Go back home</a>\n</div>\n\n","import { NgModule } from '@angular/core';\nimport { MatInputModule } from '@angular/material/input'; // Unlock input material\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatIconModule } from '@angular/material/icon'\n\n@NgModule({\n  // imports: [ // Not needed\n  //   MatInputModule,\n  //   MatCardModule,\n  //   MatButtonModule,\n  //   MatToolbarModule,\n  //   MatExpansionModule,\n  //   MatProgressSpinnerModule,\n  //   MatPaginatorModule,\n  //   MatDialogModule\n  // ],\n  exports: [\n    MatInputModule,\n    MatCardModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatExpansionModule,\n    MatProgressSpinnerModule,\n    MatPaginatorModule,\n    MatDialogModule,\n    MatSliderModule,\n    MatIconModule\n  ]\n})\n\nexport class AngularMaterialModule {\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes, Router } from '@angular/router';\nimport { PostListComponent } from './posts/post-list/post-list.component';\nimport { PostCreateComponent } from './posts/post-create-edit/post-create.component';\nimport { AuthGuard } from './auth/auth.guard';\nimport { Component404 } from './404/404.component';\nimport { FrontPageComponent } from './front-page/front-page.component';\n\nconst routes: Routes = [\n  { path: '', component: FrontPageComponent},\n  { path: 'posts', component: PostListComponent},\n  { path: 'create', component: PostCreateComponent, canActivate: [AuthGuard]},\n  { path: 'edit/:postId', component: PostCreateComponent, canActivate: [AuthGuard]},\n  { path: \"auth\", loadChildren: () => import(\"./auth/auth.module\").then(module => module.AuthModule)}, // Lazy loading\n  { path: \"404\", component: Component404},\n  { path: \"**\", component: Component404} // Must be last\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n  providers: [AuthGuard]\n})\n\nexport class AppRoutingModule {};\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  constructor(private authSerice: AuthService) {}\n  ngOnInit() {\n    this.authSerice.autoAuthUser();\n  }\n\n}\n","<app-header></app-header>\n<main>\n  <router-outlet></router-outlet>\n</main>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AuthInterceptor } from './auth/auth-interceptor';\nimport { ErrorInterceptor } from './error-interceptor';\nimport { ErrorComponent } from './error/error.component';\nimport { AngularMaterialModule } from './angular-material.module';\nimport { PostModule } from './posts/post.module';\nimport { FrontPageModule } from './front-page/front-page.module';\n// import { AuthModule } from './auth/auth.module'; // Remove to make it lazily loader\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    ErrorComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    AngularMaterialModule,\n    PostModule,\n    FrontPageModule\n  ],\n  providers: [\n    {provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true},\n    {provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true}\n  ], // For services\n  bootstrap: [AppComponent],\n  entryComponents: [ErrorComponent] // for components that are dynamically created\n})\nexport class AppModule { }\n","import { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n// Intercepting out going request\n@Injectable() // To inject services to this service\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private authService: AuthService){}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    const authToken = this.authService.getToken();\n    const authRequest = req.clone({ // Don't modify the original one\n      headers: req.headers.set('Authorization', \"Bearer \" + authToken) // Will add or override, not overwrite\n    });\n\n    return next.handle(authRequest);\n  }\n}\n","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\n    const isAuth = this.authService.getIsAuth();\n    if(!isAuth) {\n      this.router.navigate([\"/auth/login\"]);\n    }\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthData } from './auth-data.model';\nimport { Subject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\n\nconst BACKEND_URL = environment.apiURL + \"/users/\"\n\n@Injectable({ providedIn: 'root'} )\nexport class AuthService {\n  private isAuthenticated = false;\n  private token: string;\n  private tokenTimer: NodeJS.Timer; // Or type Any is fine\n  private authStatusListener = new Subject<boolean>();\n  private userId: string;\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getToken() {\n    return this.token;\n  }\n\n  getIsAuth() {\n    return this.isAuthenticated;\n  }\n\n  getAuthStatusListener() {\n    return this.authStatusListener.asObservable();\n  }\n\n  getUserId (){\n    return this.userId;\n  }\n\n  createUser(email: string, password: string) {\n    const authData: AuthData = {email, password};\n    this.http.post<{message: string}>(BACKEND_URL + \"signup\", authData)\n      .subscribe(response => {\n        console.log(response.message);\n        this.router.navigate([\"/\"]);\n      }, err => {\n        console.log(err.error.message);\n        this.authStatusListener.next(false);\n      });\n  }\n\n  login(email: string, password: string) {\n    const authData: AuthData = {email, password};\n    this.http.post<{token: string, expiresIn: number, userId: string}>(BACKEND_URL + \"login\", authData)\n      .subscribe(response => {\n        this.token = response.token;\n        if (this.token) {\n          const expiresInDuration = response.expiresIn;\n          this.setAuthTimer(expiresInDuration);\n          this.isAuthenticated = true;\n          this.userId = response.userId;\n          this.authStatusListener.next(true); // Notify about login status\n          const expiration = new Date(new Date().getTime() + expiresInDuration * 1000);\n          this.saveAuthData(this.token, expiration, this.userId);\n          this.router.navigate([\"/\"]);\n        }\n      },\n      error => {\n        this.authStatusListener.next(false);\n\n      }\n    );\n  }\n\n  logout() {\n    this.token = null;\n    this.isAuthenticated = false;\n    this.authStatusListener.next(false);\n    clearTimeout(this.tokenTimer);\n    this.clearAuthData();\n    this.userId = null;\n    this.router.navigate([\"/\"]);\n  }\n\n  autoAuthUser() {\n    const authInformation = this.getAuthData();\n    if (!authInformation) {\n      return;\n    }\n    const now = new Date();\n    const expiresIn = new Date(authInformation.expiration).getTime() - now.getTime();\n    if (expiresIn > 0) {\n      this.token = authInformation.token;\n      this.isAuthenticated = true;\n      this.userId = authInformation.userId;\n      this.authStatusListener.next(true);\n      this.setAuthTimer(expiresIn / 1000);\n    }\n  }\n\n  private setAuthTimer(duration: number) {\n    this.tokenTimer = setTimeout(() => {\n      this.logout();\n    }, duration * 1000)\n  }\n  private saveAuthData(token: string, expirationDate: Date, userId: string) {\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expiration\", expirationDate.toISOString());\n    localStorage.setItem(\"userId\", userId);\n  }\n\n  private clearAuthData() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expiration\");\n    localStorage.removeItem(\"userId\");\n  }\n\n  private getAuthData() {\n    const token = localStorage.getItem(\"token\");\n    const expiration = localStorage.getItem(\"expiration\");\n    const userId = localStorage.getItem(\"userId\");\n    if (!token || !expiration) {\n      return;\n    }\n\n    return {\n      token: token,\n      expiration: expiration,\n      userId: userId\n    };\n  }\n}\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpErrorResponse } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ErrorComponent } from './error/error.component';\n\n// Any outgoing requests that return an error will be caught in this class\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private dialog: MatDialog) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    return next.handle(req).pipe (\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = \"Unknown Error Occurred!\"\n        if (error.error.message) {\n          errorMessage = error.error.message\n        }\n        this.dialog.open(ErrorComponent, {data: {message: errorMessage}});\n        return throwError(error)\n      })\n    );\n  }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  templateUrl: './error.component.html'\n})\nexport class ErrorComponent {\n  constructor(@Inject(MAT_DIALOG_DATA) public data: {message: string}) {}\n}\n","<h1 mat-dialog-title>An Error Occured</h1>\n<div mat-dialog-content>\n  <p class=\"mat-body-1\">{{data.message}}</p>\n</div>\n<div mat-dialog-actions>\n  <button mat-button mat-dialog-close>Okay</button>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-front-page',\n  templateUrl: 'front-page.component.html',\n  styleUrls: ['front-page.component.css']\n})\nexport class FrontPageComponent {\n}\n","<mat-slider min=\"1\" max=\"100\" step=\"1\" value=\"1\">12312</mat-slider>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AngularMaterialModule } from '../angular-material.module';\nimport { AppRoutingModule } from '../app-routing.module';\nimport { FrontPageComponent } from './front-page.component';\n\n@NgModule({\n  declarations: [\n    FrontPageComponent\n  ],\n  imports: [\n    CommonModule,\n    AngularMaterialModule,\n    AppRoutingModule\n  ]\n})\nexport class FrontPageModule {\n\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\n\nexport class HeaderComponent implements OnInit, OnDestroy{\n  constructor(private authService: AuthService) {}\n  userIsAuthenticated = false;\n  private authListenerSub: Subscription;\n  ngOnInit() {\n    this.userIsAuthenticated = this.authService.getIsAuth();\n    this.authListenerSub = this.authService.getAuthStatusListener().subscribe(\n      isAuthenticated => {\n        this.userIsAuthenticated = isAuthenticated;\n      }\n    );\n  }\n\n  onLogOut() {\n    this.authService.logout();\n  }\n\n  ngOnDestroy() {\n    this.authListenerSub.unsubscribe();\n  }\n\n};\n","<mat-toolbar color='primary'>\n  <a routerLink=\"/\">MyMessages</a>\n  <span class=\"spacer\"></span>\n  <ul>\n    <li *ngIf=\"userIsAuthenticated\">\n      <a mat-button routerLink='/create' routerLinkActive=\"mat-accent\">Create</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink='/auth/login' routerLinkActive=\"mat-accent\">Login</a>\n    </li>\n    <li *ngIf=\"!userIsAuthenticated\">\n      <a mat-button routerLink='/auth/signup' routerLinkActive=\"mat-accent\">Signup</a>\n    </li>\n    <li *ngIf=\"userIsAuthenticated\">\n      <a mat-button (click)=\"onLogOut()\">Logout</a>\n    </li>\n  </ul>\n</mat-toolbar>\n\n<mat-toolbar color=\"primary\">\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with menu icon\">\n    <mat-icon>menu</mat-icon>\n  </button>\n  <span>My App</span>\n  <span class=\"example-spacer\"></span>\n  <button mat-icon-button class=\"example-icon favorite-icon\" aria-label=\"Example icon-button with heart icon\">\n    <mat-icon>favorite</mat-icon>\n  </button>\n  <button mat-icon-button class=\"example-icon\" aria-label=\"Example icon-button with share icon\">\n    <mat-icon>share</mat-icon>\n  </button>\n</mat-toolbar>\n","import { AbstractControl } from \"@angular/forms\";\nimport { Observable, Observer, of } from \"rxjs\";\n\nexport const mimeType = (\n  control: AbstractControl\n): Promise<{ [key: string]: any }> | Observable<{ [key: string]: any }> => {\n  if (typeof(control.value) === 'string') {\n    return of(null);\n  }\n  const file = control.value as File;\n  const fileReader = new FileReader();\n  const frObs = Observable.create(\n    (observer: Observer<{ [key: string]: any }>) => {\n      fileReader.addEventListener(\"loadend\", () => {\n        const arr = new Uint8Array(fileReader.result as ArrayBuffer).subarray(0, 4);\n        let header = \"\";\n        let isValid = false;\n        for (let i = 0; i < arr.length; i++) {\n          header += arr[i].toString(16);\n        }\n        switch (header) {\n          case \"89504e47\":\n            isValid = true;\n            break;\n          case \"ffd8ffe0\":\n          case \"ffd8ffe1\":\n          case \"ffd8ffe2\":\n          case \"ffd8ffe3\":\n          case \"ffd8ffe8\":\n            isValid = true;\n            break;\n          default:\n            isValid = false; // Or you can use the blob.type as fallback\n            break;\n        }\n        if (isValid) {\n          observer.next(null);\n        } else {\n          observer.next({ invalidMimeType: true });\n        }\n        observer.complete();\n      });\n      fileReader.readAsArrayBuffer(file);\n    }\n  );\n  return frObs;\n};\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms'\n\nimport { PostsService } from '../post.service';\nimport { ActivatedRoute } from '@angular/router'; // to get info of the route through params\nimport { Post } from '../post.model';\nimport { mimeType } from \"./mime-type.validator\";\nimport { Subscription } from 'rxjs';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-post-create',\n  templateUrl: './post-create.component.html',\n  styleUrls: ['./post-create.component.css']\n})\n\nexport class PostCreateComponent implements OnInit, OnDestroy{\n  private mode = 'create';\n  private postId: string;\n  post: Post;\n  isLoading = false;\n  form: FormGroup;\n  imagePreview: string;\n  private authStatusSub: Subscription;\n\n\n  constructor(\n    public postsService: PostsService,\n    public route: ActivatedRoute,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  ngOnDestroy(): void {\n    this.authStatusSub.unsubscribe();\n  }\n\n  ngOnInit() {\n    this.authStatusSub = this.authService.getAuthStatusListener().subscribe(\n      authStatus => {\n        this.isLoading = false; // Remove spinner every time auth status changes\n      }\n    );\n    // Set up form\n    this.form = new FormGroup({\n      title: new FormControl(null, {\n        validators: [Validators.required, Validators.minLength(3)]\n      }),\n      content: new FormControl(null, {validators: [Validators.required]}),\n      image: new FormControl(null, {validators: [Validators.required], asyncValidators: [mimeType]})\n    });\n    // Subcribe to see the active route\n    this.route.paramMap.subscribe((paramMap) => {\n      if (paramMap.has('postId')) { // Edit case\n        this.mode = 'edit';\n        this.postId = paramMap.get('postId');\n        this.isLoading = true;\n\n        this.postsService.getPost(this.postId).subscribe(\n          postData => {\n            this.isLoading = false;\n            this.post = {\n              id: postData._id,\n              title: postData.title,\n              content: postData.content,\n              imagePath: postData.imagePath,\n              creator: postData.creator\n            }\n            // Initialize the form\n            this.form.setValue({\n              title: this.post.title,\n              content: this.post.content,\n              image: this.post.imagePath\n            });\n          },\n          err => {\n            this.router.navigate(['/404']);\n          });\n      } else {\n        this.mode = 'create';\n        this.postId = null;\n      }\n    });\n  }\n\n  onSavePost() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.isLoading = true;\n    if (this.mode === 'create') {\n      this.postsService.addPost(\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image);\n    } else {\n      this.postsService.updatePost(\n        this.postId,\n        this.form.value.title,\n        this.form.value.content,\n        this.form.value.image);\n    }\n    this.form.reset();\n  }\n\n  onImagePicked(event: Event) {\n    const file = (event.target as HTMLInputElement).files[0];\n    this.form.patchValue({image: file}); // Target a single control\n    this.form.get('image').updateValueAndValidity(); // Update and validate without html form\n    const reader = new FileReader();\n    reader.onload = () => { // When done loading\n      this.imagePreview = reader.result as string;\n    }\n    reader.readAsDataURL(file); // This will kick off onload process\n  }\n}\n","<mat-slider min=\"1\" max=\"100\" step=\"1\" value=\"1\"></mat-slider>\n\n<mat-card>\n  <mat-spinner *ngIf='isLoading'></mat-spinner>\n  <form [formGroup]='form' (submit)='onSavePost()' *ngIf='!isLoading'>\n    <mat-form-field>\n      <input\n      matInput\n      type='text'\n      formControlName='title'\n      placeholder='Post Title'>\n      <mat-error *ngIf=\"form.get('title').invalid\">Please enter a post title</mat-error>\n    </mat-form-field>\n\n    <div>\n      <button mat-stroked-button type='button' (click)='filePicker.click()'>Pick Image</button>\n      <input type=\"file\" #filePicker (change)='onImagePicked($event)'>\n    </div>\n\n    <div class='image-preview' *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').valid\">\n      <img [src]='imagePreview' [alt]='form.value.title'>\n    </div>\n    <mat-error *ngIf=\"imagePreview !== '' && imagePreview && form.get('image').invalid\">Invalid input type</mat-error>\n\n    <mat-form-field>\n      <textarea\n      matInput\n      rows='10'\n      formControlName='content'\n      placeholder='Post Content'></textarea>\n      <mat-error *ngIf=\"form.get('content').invalid\">Please enter some post content</mat-error>\n    </mat-form-field>\n\n    <button\n      mat-raised-button\n      color='primary'\n      type='submit'>Save Post\n    </button>\n  </form>\n</mat-card>\n<!-- ? check if it's undefined -->\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { PageEvent } from '@angular/material/paginator';\nimport { Subscription } from 'rxjs';\n\nimport { Post } from '../post.model';\nimport { PostsService } from '../post.service';\nimport { AuthService } from 'src/app/auth/auth.service';\n\n@Component({\n  selector: 'app-post-list',\n  templateUrl: './post-list.component.html',\n  styleUrls: ['./post-list.component.css']\n})\n\nexport class PostListComponent implements OnInit, OnDestroy {\n  posts: Post[] = [];\n  private postsSub: Subscription;\n  private authListenerSub: Subscription;\n  userIsAuthenticated = false;\n  isLoading = false;\n  userId: string;\n  totalPosts = 0;\n  postsPerPage = 5;\n  currentPage = 1;\n  pageSizeOptions = [1, 2, 5, 10];\n  // postsService: PostsService;\n  // constructor(postsService: PostsService) {\n  //   this.postsService = postsService;\n  // }\n  constructor(\n    public postsService: PostsService,\n    private authService: AuthService\n  ) {} // Public simplifies code\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.postsService.getPosts(this.postsPerPage, 1); // This will update the getPostUpdateListener observable\n    this.postsSub = this.postsService.getPostUpdateListener()\n      .subscribe((postData: {posts: Post[], maxPosts: number}) => {\n        this.isLoading = false;\n        this.posts = postData.posts;\n        this.totalPosts = postData.maxPosts;\n    });\n    this.userIsAuthenticated = this.authService.getIsAuth(); // Get current login status\n    this.userId = this.authService.getUserId();\n    // Since the post list component is loaded after logging in\n    // so this block won't be entered again (no new broadcast)\n    this.authListenerSub = this.authService.getAuthStatusListener().subscribe(\n      isAuthenticated => {\n        this.userIsAuthenticated = isAuthenticated;\n        this.userId = this.authService.getUserId();\n      }\n    );\n  }\n\n  onDelete(postId: string) {\n    this.isLoading = true;\n    this.postsService.deletePost(postId).subscribe(() => {\n      this.postsService.getPosts(this.postsPerPage, this.currentPage); // refetch after deletion\n    }, () => {\n      this.isLoading = false;\n    });\n  }\n\n  onChangedPage(pageData: PageEvent) {\n    this.isLoading = true;\n    this.currentPage = pageData.pageIndex + 1;\n    this.postsPerPage = pageData.pageSize;\n    this.postsService.getPosts(this.postsPerPage, this.currentPage);\n  }\n\n  ngOnDestroy() {\n    this.postsSub.unsubscribe();\n    this.authListenerSub.unsubscribe();\n  }\n}\n","<mat-spinner *ngIf='isLoading'></mat-spinner>\n<mat-accordion multi='true' *ngIf='posts.length > 0 && !isLoading'>\n  <mat-expansion-panel *ngFor='let post of posts'>\n    <mat-expansion-panel-header>\n      {{ post.title }}\n    </mat-expansion-panel-header>\n    <div class='post-image'>\n      <img [src]='post.imagePath' [alt]='post.title'>\n    </div>\n    <p>{{ post.content }}</p>\n    <mat-action-row *ngIf=\"userIsAuthenticated && userId === post.creator\">\n      <a mat-button color='primary' [routerLink]=\"['/edit', post.id]\" >Edit</a>\n      <button mat-button color='warn' (click)='onDelete(post.id)'>Delete</button>\n    </mat-action-row>\n  </mat-expansion-panel>\n</mat-accordion>\n<mat-paginator [length]='totalPosts' [pageSize]='postsPerPage' [pageSizeOptions]='pageSizeOptions' (page)='onChangedPage($event)'></mat-paginator>\n<p class='info-text mat-body-1' *ngIf='posts.length <= 0 && !isLoading'>No posts added yet</p>\n","import { NgModule } from '@angular/core';\nimport { PostListComponent } from './post-list/post-list.component';\nimport { PostCreateComponent } from './post-create-edit/post-create.component';\n\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AngularMaterialModule } from '../angular-material.module';\nimport { AppRoutingModule } from '../app-routing.module';\n\n@NgModule({\n  declarations: [\n    PostCreateComponent,\n    PostListComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    AppRoutingModule\n  ]\n})\nexport class PostModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\nimport { Post } from './post.model';\nimport { Router } from '@angular/router'; // For navigation\nimport { environment } from 'src/environments/environment';\n\nconst BACKEND_URL = environment.apiURL + \"/posts/\"\n\n@Injectable({providedIn: 'root'}) // Or add PostService to providers in app.module\nexport class PostsService {\n  private posts: Post[] = [];\n  private postsUpdated = new Subject<{posts: Post[], maxPosts: number}>(); // Like an event emitter\n\n  constructor(private httpClient: HttpClient, private router: Router) {}\n\n  getPosts(postsPerPage: number, currentPage:number) {\n    const queryParams = `?pageSize=${postsPerPage}&currentPage=${currentPage}`;\n    // return [...this.posts]; // ... pulls out the content to make a copy\n    this.httpClient\n      .get<{message: string, posts: any, maxPosts: number}>(BACKEND_URL + queryParams)\n      .pipe(map((postData) => {\n        return {posts: postData.posts.map(post => {\n            return {\n            title: post.title,\n            content: post.content,\n            id: post._id,\n            imagePath: post.imagePath,\n            creator: post.creator\n            }\n          }),\n          maxPosts: postData.maxPosts};\n        })\n      )\n      .subscribe((transformedPosts) => {\n        this.posts = transformedPosts.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          maxPosts: transformedPosts.maxPosts\n        });\n    });\n  }\n\n  getPost(postId: String) {\n    return this.httpClient.get<{\n      _id: string,\n      title: string,\n      content: string,\n      imagePath: string,\n      creator: string}>(BACKEND_URL + postId); // return an observable\n  }\n\n  getPostUpdateListener() {\n    return this.postsUpdated.asObservable();\n  }\n\n  addPost(title: string, content: string, image: File) {\n    // const post: Post = {id: null, title: title, content: content};\n    const postData = new FormData();\n    postData.append('title', title);\n    postData.append('content', content);\n    postData.append('image', image, title);\n    this.httpClient\n      .post<{message: string, post: Post}>(BACKEND_URL, postData)\n      .subscribe((responseData) => {\n        const post: Post = {\n          id: responseData.post.id,\n          title: responseData.post.title,\n          content: responseData.post.content,\n          imagePath: responseData.post.imagePath,\n          creator: responseData.post.creator\n        };\n        console.log(responseData.message);\n        this.posts.push(post);\n        this.router.navigate(['/']); // Will reload, no need to emit\n    });\n\n  }\n\n  deletePost(postId: string) {\n    return this.httpClient.delete(BACKEND_URL + postId);\n  }\n\n  updatePost(id: string, title: string, content: string, image: File | string) {\n    let postData: Post | FormData;\n    if (typeof(image) === 'object') {\n      postData = new FormData();\n      postData.append('id', id);\n      postData.append('title', title);\n      postData.append('content', content);\n      postData.append('image', image, title);\n    } else {\n      postData = {\n        id: id,\n        title: title,\n        content: content,\n        imagePath: image,\n        creator: null // Get creator id from auth service to be safe\n      }\n    }\n\n    this.httpClient.put<{message: string, updatedPost: Post}>(BACKEND_URL + id, postData)\n      .subscribe(response => {\n        const updatedPosts = [...this.posts]; // create a copy\n        const oldPostIndex = updatedPosts.findIndex(p => p.id === id);\n        const post: Post = {\n          id: response.updatedPost.id,\n          title: response.updatedPost.title,\n          content: response.updatedPost.content,\n          imagePath: response.updatedPost.imagePath,\n          creator: response.updatedPost.creator\n        }\n        updatedPosts[oldPostIndex] = post;\n        this.posts = updatedPosts;\n        this.router.navigate(['/']); // Will reload, no need to emit\n      });\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiURL: \"http://localhost:3000/api\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}